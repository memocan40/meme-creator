{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","meme","setmeme","value","setvalue","input","setinput","uppertext","setuppertext","bottomtext","setbottomtext","memevalue","setmemevalue","axios","get","then","res","data","memes","url","console","log","className","type","placeholder","onChange","event","target","onClick","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA8BeA,MA1Bf,WAAgB,IAAD,EACKC,mBAAS,uGADd,mBACTC,EADS,KACJC,EADI,OAEOF,mBAAS,GAFhB,mBAETG,EAFS,KAEHC,EAFG,OAGOJ,qBAHP,mBAGTK,EAHS,KAGHC,EAHG,OAIeN,mBAAS,KAJxB,mBAITO,EAJS,KAICC,EAJD,OAKiBR,mBAAS,KAL1B,mBAKTS,EALS,KAKEC,EALF,OAMeV,qBANf,mBAMTW,EANS,KAMCC,EAND,KAYb,OAHAC,IAAMC,IAAI,qCAAqCC,MAAK,SAACC,GAAOd,EAAQc,EAAIC,KAAKA,KAAKC,MAAMf,GAAOgB,QAE/FN,IAAMC,IAAI,0CAA0CC,MAAK,SAACC,GAAOI,QAAQC,IAAIL,MAE3E,sBAAKM,UAAU,MAAf,UACA,+DACA,gCAAK,uBAAOA,UAAU,QAAQC,KAAK,SAASC,YAAY,+BAA+BC,SAAU,SAACC,GAASpB,EAASoB,EAAMC,OAAOxB,UAAiB,uBAAOoB,KAAK,SAASpB,MAAM,SAASyB,QAAS,WAAKxB,EAASC,SAE7M,8BAAK,uBAAOkB,KAAK,OAAOE,SAAU,SAACC,GAASd,EAAac,EAAMC,OAAOxB,YACtE,gCAAK,wBAAQyB,QAAS,WAAKpB,EAAaG,IAAnC,uBAAL,IAAwE,wBAAQiB,QAAS,WAAKlB,EAAcC,IAApC,wBAAoE,wBAAQiB,QAAS,WAAKpB,EAAa,IAAIE,EAAc,KAArD,sBAC5I,sBAAKY,UAAU,QAAf,UAAuB,oBAAIA,UAAU,YAAd,SAA2Bf,IAAlD,IAAkE,qBAAKe,UAAU,UAAUO,IAAK5B,IAAhG,IAA6G,oBAAIqB,UAAU,aAAd,SAA4Bb,IAAzI,WCXWqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7d0934d.chunk.js","sourcesContent":["import React,{useState} from \"react\";\nimport './App.css';\nimport axios from \"axios\";\n\nfunction App() {\n  let[meme,setmeme]=useState(\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTU4-uiNVupvlR8nyiZSO3VbRIgLHviJ4ZHUQ&usqp=CAU\")\n  let[value,setvalue]=useState(1);\n  let[input,setinput]=useState();\n  let[uppertext,setuppertext]=useState(\" \");\n  let[bottomtext,setbottomtext]=useState(\" \");\n  let[memevalue,setmemevalue]=useState();\n\n\n  axios.get(\"https://api.imgflip.com/get_memes\").then((res)=>{setmeme(res.data.data.memes[value].url)});\n \n  axios.get(\"http://alpha-meme-maker.herokuapp.com/\").then((res)=>{console.log(res)})\n  return (\n    <div className=\"App\">\n    <div>type a meme id between 0-100</div>\n    <div><input className=\"input\" type=\"number\" placeholder=\"type a meme id between 0-100\" onChange={(event)=>{setinput(event.target.value)}}></input><input type=\"submit\" value=\"Submit\" onClick={()=>{setvalue(input)}}></input></div>\n    \n    <div><input type=\"text\" onChange={(event)=>{setmemevalue(event.target.value)}}></input></div>\n    <div><button onClick={()=>{setuppertext(memevalue)}}>UpperText</button> <button onClick={()=>{setbottomtext(memevalue)}}>BottomText</button><button onClick={()=>{setuppertext(\"\");setbottomtext(\"\");}}>Clear</button></div>\n    <div className=\"memes\"><h2 className=\"uppertext\">{uppertext}</h2> <img className=\"memepic\" src={meme}></img> <h2 className=\"bottomtext\">{bottomtext}</h2> </div>\n    \n  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}